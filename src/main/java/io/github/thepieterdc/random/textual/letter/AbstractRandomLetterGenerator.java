/*
 * Copyright (c) 2019. All rights reserved.
 *
 * @author Pieter De Clercq
 *
 * https://github.com/thepieterdc/random-java
 */
package io.github.thepieterdc.random.textual.letter;

import io.github.thepieterdc.random.AbstractRandomGenerator;

import java.util.Collection;
import java.util.Collections;
import java.util.List;
import java.util.stream.Collectors;

/**
 * Generates a random letter from a string.
 */
abstract class AbstractRandomLetterGenerator extends AbstractRandomGenerator<Character> {
	private final String letters;
	
	/**
	 * AbstractRandomLetterGenerator constructor.
	 *
	 * @param letters the letters to pick from
	 */
	AbstractRandomLetterGenerator(final String letters) {
		this.letters = letters;
	}
	
	@Override
	public Collection<Character> generate(int amount, int maxTries) {
		if (amount < 0) {
			throw new IllegalArgumentException("The amount of values to generate must be greater than zero.");
		}
		
		if (amount > this.getCapacity()) {
			throw new IllegalArgumentException(
				String.format("At most %d distinct random values can be generated by this generator.", this.getCapacity())
			);
		}
		
		final List<Character> characters = this.letters.chars().mapToObj(c -> (char) c).collect(Collectors.toList());
		Collections.shuffle(characters);
		return characters.subList(0, amount);
	}
	
	@Override
	public Character generate() {
		final int position = this.rng.nextInt(this.letters.length());
		return this.letters.charAt(position);
	}
	
	@Override
	public long getCapacity() {
		return letters.length();
	}
}
