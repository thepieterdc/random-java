/*
 * Copyright (c) 2019. All rights reserved.
 *
 * @author Pieter De Clercq
 *
 * https://github.com/thepieterdc/random-java
 */
package io.github.thepieterdc.random;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.Collections;

/**
 * A random generator for boolean values.
 */
public class RandomBooleanGenerator extends AbstractRandomGenerator<Boolean> {
	private final double trueProbability;
	
	/**
	 * RandomBooleanGenerator constructor.
	 *
	 * @param trueProbability the probability to generate true, between 0 and 1
	 */
	public RandomBooleanGenerator(final double trueProbability) {
		this.trueProbability = trueProbability;
	}
	
	/**
	 * RandomBooleanGenerator constructor.
	 */
	public RandomBooleanGenerator() {
		this(0.5);
	}
	
	@Override
	public Collection<Boolean> generate(int amount, int maxTries) {
		if (amount < 0) {
			throw new IllegalArgumentException("The amount of values to generate must be greater than zero.");
		}
		
		if (amount > this.getCapacity()) {
			throw new IllegalArgumentException(
				String.format("At most %d distinct random values can be generated by this generator.", this.getCapacity())
			);
		}
		
		if (amount == 1) {
			return new ArrayList<>(Collections.singleton(generate()));
		}
		
		return Arrays.asList(true, false);
	}
	
	public Boolean generate() {
		return this.rng.nextDouble() < this.trueProbability;
	}
	
	@Override
	public long getCapacity() {
		if (this.trueProbability == 0 || this.trueProbability == 1.0) {
			return 1;
		}
		return 2;
	}
}
