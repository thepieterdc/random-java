/*
 * Copyright (c) 2019. All rights reserved.
 *
 * @author Pieter De Clercq
 *
 * https://github.com/thepieterdc/random-java
 */
package io.github.thepieterdc.random;

import java.util.Collection;

/**
 * A generator for random values.
 *
 * @param <T> type class of the generated value
 */
public interface RandomGenerator<T> {
	/**
	 * Tries to generates {amount} unique random values within the given
	 * maximum amount of attempts (this serves as a bound to prevent endless
	 * loops).
	 *
	 * @param amount   the amount of random values to generate, must be lower
	 *                 than or equal to the capacity
	 * @param maxTries the maximum amount of tries allowed
	 * @return at most {amount} unique random values
	 */
	Collection<T> generate(int amount, int maxTries);
	
	/**
	 * Generates a random value.
	 *
	 * @return the random value
	 */
	T generate();
	
	/**
	 * Gets the maximum amount of unique random values that can be generated by
	 * this random generator.
	 *
	 * @return the maximum amount of distinct random values
	 */
	long getCapacity();
	
	/**
	 * Gets the maximum amount of unique random values that can be generated by
	 * this random generator. This must be an int, since it might be used in
	 * collections.
	 *
	 * @return a lower bound for the maximum amount of distinct random values
	 */
	int getIntegerCapacity();
}
