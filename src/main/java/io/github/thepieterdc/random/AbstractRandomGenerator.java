/*
 * Copyright (c) 2019. All rights reserved.
 *
 * @author Pieter De Clercq
 *
 * https://github.com/thepieterdc/random-java
 */
package io.github.thepieterdc.random;

import java.util.Collection;
import java.util.HashSet;
import java.util.Random;
import java.util.concurrent.ThreadLocalRandom;

/**
 * An abstract random generator.
 */
public abstract class AbstractRandomGenerator<T> implements RandomGenerator<T> {
	protected Random rng;
	
	/**
	 * AbstractRandomGenerator constructor.
	 */
	protected AbstractRandomGenerator() {
		this.rng = ThreadLocalRandom.current();
	}
	
	@Override
	public Collection<T> generate(int amount, int maxTries) {
		if (amount < 0) {
			throw new IllegalArgumentException("The amount of values to generate must be greater than zero.");
		}
		
		if (amount > this.getCapacity()) {
			throw new IllegalArgumentException(
				String.format("At most %d distinct random values can be generated by this generator.", this.getCapacity())
			);
		}
		
		final Collection<T> ret = new HashSet<>(amount);
		
		int tries = 0;
		
		while (ret.size() < amount && tries < maxTries) {
			ret.add(this.generate());
			tries++;
		}
		return ret;
	}
	
	@Override
	public int getIntegerCapacity() {
		if (this.getCapacity() > Integer.MAX_VALUE) {
			return Integer.MAX_VALUE;
		}
		return (int) this.getCapacity();
	}
	
	/**
	 * Sets the Random generator to use. This method can for example be used to
	 * configure a seed.
	 *
	 * @param random the random generator
	 * @return fluent
	 */
	public RandomGenerator<T> setRNG(final Random random) {
		this.rng = random;
		return this;
	}
}
